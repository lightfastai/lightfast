/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AgentsRouteImport } from './routes/agents'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as ApiAgentsServerRouteImport } from './routes/api/agents'
import { ServerRoute as ApiAgentsAgentIdServerRouteImport } from './routes/api/agents.$agentId'

const rootServerRouteImport = createServerRootRoute()

const AgentsRoute = AgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAgentsServerRoute = ApiAgentsServerRouteImport.update({
  id: '/api/agents',
  path: '/api/agents',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAgentsAgentIdServerRoute = ApiAgentsAgentIdServerRouteImport.update({
  id: '/$agentId',
  path: '/$agentId',
  getParentRoute: () => ApiAgentsServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/agents'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/agents'
  id: '__root__' | '/' | '/agents'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRoute: typeof AgentsRoute
}
export interface FileServerRoutesByFullPath {
  '/api/agents': typeof ApiAgentsServerRouteWithChildren
  '/api/agents/$agentId': typeof ApiAgentsAgentIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/agents': typeof ApiAgentsServerRouteWithChildren
  '/api/agents/$agentId': typeof ApiAgentsAgentIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/agents': typeof ApiAgentsServerRouteWithChildren
  '/api/agents/$agentId': typeof ApiAgentsAgentIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/agents' | '/api/agents/$agentId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/agents' | '/api/agents/$agentId'
  id: '__root__' | '/api/agents' | '/api/agents/$agentId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAgentsServerRoute: typeof ApiAgentsServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/agents': {
      id: '/api/agents'
      path: '/api/agents'
      fullPath: '/api/agents'
      preLoaderRoute: typeof ApiAgentsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/agents/$agentId': {
      id: '/api/agents/$agentId'
      path: '/$agentId'
      fullPath: '/api/agents/$agentId'
      preLoaderRoute: typeof ApiAgentsAgentIdServerRouteImport
      parentRoute: typeof ApiAgentsServerRoute
    }
  }
}

interface ApiAgentsServerRouteChildren {
  ApiAgentsAgentIdServerRoute: typeof ApiAgentsAgentIdServerRoute
}

const ApiAgentsServerRouteChildren: ApiAgentsServerRouteChildren = {
  ApiAgentsAgentIdServerRoute: ApiAgentsAgentIdServerRoute,
}

const ApiAgentsServerRouteWithChildren = ApiAgentsServerRoute._addFileChildren(
  ApiAgentsServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRoute: AgentsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAgentsServerRoute: ApiAgentsServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
