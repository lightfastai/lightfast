import baseConfig from "@repo/eslint-config/base";

/** @type {import('eslint').Linter.Config[]} */
export default [
  ...baseConfig,
  {
    ignores: ["dist/**", ".turbo/**", "node_modules/**"],
  },
  {
    files: ["**/*.ts", "**/*.js"],
    rules: {
      // TypeScript Type Safety - Maximum strictness
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-unsafe-assignment": "error",
      "@typescript-eslint/no-unsafe-member-access": "error",
      "@typescript-eslint/no-unsafe-call": "error",
      "@typescript-eslint/no-unsafe-argument": "error",
      "@typescript-eslint/no-unsafe-return": "error",
      "@typescript-eslint/no-unsafe-enum-comparison": "error",
      "@typescript-eslint/no-non-null-assertion": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/strict-boolean-expressions": ["error", {
        allowString: false,
        allowNumber: false,
        allowNullableObject: false,
        allowNullableBoolean: false,
        allowNullableString: false,
        allowNullableNumber: false,
        allowAny: false,
      }],
      
      // Code Quality & Best Practices
      "@typescript-eslint/explicit-function-return-type": ["error", {
        allowExpressions: false,
        allowTypedFunctionExpressions: false,
        allowHigherOrderFunctions: false,
      }],
      "@typescript-eslint/explicit-module-boundary-types": "error",
      "@typescript-eslint/no-unused-vars": ["error", {
        argsIgnorePattern: "^_",
        varsIgnorePattern: "^_",
        caughtErrorsIgnorePattern: "^_",
        ignoreRestSiblings: false,
      }],
      "@typescript-eslint/no-unused-expressions": ["error", {
        allowShortCircuit: false,
        allowTernary: false,
        allowTaggedTemplates: false,
      }],
      "@typescript-eslint/require-await": "error",
      "@typescript-eslint/no-floating-promises": ["error", {
        ignoreVoid: false,
        ignoreIIFE: false,
      }],
      "@typescript-eslint/no-misused-promises": ["error", {
        checksVoidReturn: true,
        checksConditionals: true,
      }],
      "@typescript-eslint/promise-function-async": "error",
      "@typescript-eslint/no-unnecessary-condition": ["error", {
        allowConstantLoopConditions: false,
      }],
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/no-unnecessary-type-arguments": "error",
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      
      // Naming Conventions
      "@typescript-eslint/naming-convention": [
        "error",
        {
          selector: "default",
          format: ["camelCase"],
          leadingUnderscore: "forbid",
          trailingUnderscore: "forbid",
        },
        {
          selector: "variable",
          format: ["camelCase", "UPPER_CASE"],
          leadingUnderscore: "allow",
        },
        {
          selector: "parameter",
          format: ["camelCase"],
          leadingUnderscore: "allow",
        },
        {
          selector: "typeLike",
          format: ["PascalCase"],
        },
        {
          selector: "enumMember",
          format: ["UPPER_CASE"],
        },
        {
          selector: "property",
          format: null, // Allow any format for properties
        },
      ],
      
      // Consistency & Style
      "@typescript-eslint/prefer-nullish-coalescing": ["error", {
        ignoreConditionalTests: false,
        ignoreTernaryTests: false,
        ignoreMixedLogicalExpressions: false,
      }],
      "@typescript-eslint/prefer-optional-chain": "error",
      "@typescript-eslint/prefer-readonly": "error",
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-includes": "error",
      "@typescript-eslint/prefer-literal-enum-member": "error",
      "@typescript-eslint/prefer-namespace-keyword": "error",
      "@typescript-eslint/prefer-reduce-type-parameter": "error",
      "@typescript-eslint/prefer-regexp-exec": "error",
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      "@typescript-eslint/prefer-ts-expect-error": "error",
      "@typescript-eslint/prefer-return-this-type": "error",
      "@typescript-eslint/consistent-type-assertions": ["error", {
        assertionStyle: "never",
      }],
      "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
      "@typescript-eslint/consistent-type-imports": ["error", {
        prefer: "type-imports",
        fixStyle: "inline-type-imports",
      }],
      "@typescript-eslint/consistent-type-exports": ["error", {
        fixMixedExportsWithInlineTypeSpecifier: true,
      }],
      "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
      "@typescript-eslint/consistent-generic-constructors": ["error", "constructor"],
      
      // Template Strings & Arrays
      "@typescript-eslint/restrict-template-expressions": ["error", {
        allowNumber: false,
        allowBoolean: false,
        allowAny: false,
        allowNullish: false,
        allowRegExp: false,
      }],
      "@typescript-eslint/no-base-to-string": "error",
      "@typescript-eslint/array-type": ["error", {
        default: "array",
        readonly: "array",
      }],
      
      // Imports & Modules
      "@typescript-eslint/no-import-type-side-effects": "error",
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-useless-empty-export": "error",
      
      // Functions & Methods
      "@typescript-eslint/method-signature-style": ["error", "property"],
      "@typescript-eslint/no-confusing-void-expression": ["error", {
        ignoreArrowShorthand: false,
        ignoreVoidOperator: false,
      }],
      "@typescript-eslint/no-invalid-void-type": "error",
      "@typescript-eslint/no-meaningless-void-operator": "error",
      "@typescript-eslint/return-await": ["error", "always"],
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/unbound-method": ["error", {
        ignoreStatic: false,
      }],
      
      // Classes
      "@typescript-eslint/explicit-member-accessibility": ["error", {
        accessibility: "explicit",
      }],
      "@typescript-eslint/member-ordering": "error",
      "@typescript-eslint/no-extraneous-class": "error",
      "@typescript-eslint/no-useless-constructor": "error",
      "@typescript-eslint/class-literal-property-style": ["error", "fields"],
      
      // Error Prevention
      "@typescript-eslint/no-array-delete": "error",
      "@typescript-eslint/no-duplicate-type-constituents": "error",
      "@typescript-eslint/no-dynamic-delete": "error",
      "@typescript-eslint/no-invalid-this": "error",
      "@typescript-eslint/no-loop-func": "error",
      "@typescript-eslint/no-loss-of-precision": "error",
      "@typescript-eslint/no-mixed-enums": "error",
      "@typescript-eslint/no-redundant-type-constituents": "error",
      "@typescript-eslint/only-throw-error": "error",
      "@typescript-eslint/prefer-promise-reject-errors": "error",
      "@typescript-eslint/no-for-in-array": "error",
      "@typescript-eslint/no-implied-eval": "error",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-this-alias": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unsafe-declaration-merging": "error",
      "@typescript-eslint/no-use-before-define": ["error", {
        functions: true,
        classes: true,
        variables: true,
        allowNamedExports: false,
      }],
      
      // Comments & Documentation
      "@typescript-eslint/ban-ts-comment": ["error", {
        "ts-expect-error": "allow-with-description",
        "ts-ignore": true,
        "ts-nocheck": true,
        "ts-check": false,
        minimumDescriptionLength: 10,
      }],
      "@typescript-eslint/triple-slash-reference": ["error", {
        path: "never",
        types: "never",
        lib: "never",
      }],
      
      // Deprecated & Legacy
      
      // General JavaScript Rules (via TypeScript)
      "@typescript-eslint/default-param-last": "error",
      "@typescript-eslint/dot-notation": "error",
      "@typescript-eslint/no-dupe-class-members": "error",
      "@typescript-eslint/no-empty-function": "error",
      "@typescript-eslint/no-redeclare": "error",
      "@typescript-eslint/no-shadow": ["error", {
        builtinGlobals: true,
        hoist: "all",
      }],
      
      // Performance
      
      // Additional Core JavaScript Rules
      "no-console": ["error", { allow: ["warn", "error"] }],
      "no-debugger": "error",
      "no-alert": "error",
      "no-eval": "error",
      "no-implied-eval": "error",
      "no-extend-native": "error",
      "no-iterator": "error",
      "no-labels": "error",
      "no-lone-blocks": "error",
      "no-multi-spaces": "error",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-octal-escape": "error",
      "no-proto": "error",
      "no-restricted-globals": ["error", "event", "name", "length"],
      "no-script-url": "error",
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-unmodified-loop-condition": "error",
      "no-unused-labels": "error",
      "no-useless-call": "error",
      "no-useless-concat": "error",
      "no-useless-escape": "error",
      "no-useless-return": "error",
      "no-void": "error",
      "no-with": "error",
      "radix": "error",
      "wrap-iife": ["error", "inside"],
      "yoda": "error",
      "no-delete-var": "error",
      "no-label-var": "error",
      "no-shadow-restricted-names": "error",
      "no-undef-init": "error",
      "no-buffer-constructor": "error",
      "no-new-require": "error",
      "no-path-concat": "error",
      "array-bracket-spacing": ["error", "never"],
      "block-spacing": ["error", "always"],
      "brace-style": ["error", "1tbs", { allowSingleLine: false }],
      "comma-dangle": ["error", "always-multiline"],
      "comma-spacing": ["error", { before: false, after: true }],
      "comma-style": ["error", "last"],
      "computed-property-spacing": ["error", "never"],
      "eol-last": ["error", "always"],
      "func-call-spacing": ["error", "never"],
      "indent": ["error", 2, { SwitchCase: 1 }],
      "key-spacing": ["error", { beforeColon: false, afterColon: true }],
      "keyword-spacing": ["error", { before: true, after: true }],
      "linebreak-style": ["error", "unix"],
      "max-len": ["error", {
        code: 100,
        tabWidth: 2,
        ignoreUrls: true,
        ignoreStrings: false,
        ignoreTemplateLiterals: false,
        ignoreRegExpLiterals: false,
      }],
      "new-cap": ["error", { newIsCap: true, capIsNew: false }],
      "new-parens": "error",
      "no-array-constructor": "error",
      "no-mixed-spaces-and-tabs": "error",
      "no-multiple-empty-lines": ["error", { max: 1, maxEOF: 1 }],
      "no-new-object": "error",
      "no-tabs": "error",
      "no-trailing-spaces": "error",
      "no-unneeded-ternary": "error",
      "no-whitespace-before-property": "error",
      "object-curly-spacing": ["error", "always"],
      "object-property-newline": ["error", { allowAllPropertiesOnSameLine: true }],
      "operator-linebreak": ["error", "after"],
      "padded-blocks": ["error", "never"],
      "quotes": ["error", "double", { avoidEscape: true }],
      "semi": ["error", "always"],
      "semi-spacing": ["error", { before: false, after: true }],
      "space-before-blocks": ["error", "always"],
      "space-before-function-paren": ["error", {
        anonymous: "always",
        named: "never",
        asyncArrow: "always",
      }],
      "space-in-parens": ["error", "never"],
      "space-infix-ops": "error",
      "space-unary-ops": ["error", { words: true, nonwords: false }],
      "spaced-comment": ["error", "always", { markers: ["/"] }],
      "template-curly-spacing": ["error", "never"],
      "unicode-bom": ["error", "never"],
      "arrow-body-style": ["error", "as-needed"],
      "arrow-parens": ["error", "always"],
      "arrow-spacing": ["error", { before: true, after: true }],
      "generator-star-spacing": ["error", { before: false, after: true }],
      "no-confusing-arrow": "error",
      "no-duplicate-imports": "error",
      "no-useless-computed-key": "error",
      "no-useless-rename": "error",
      "no-var": "error",
      "object-shorthand": ["error", "always"],
      "prefer-arrow-callback": "error",
      "prefer-const": "error",
      "prefer-destructuring": ["error", {
        array: true,
        object: true,
      }],
      "prefer-numeric-literals": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "rest-spread-spacing": ["error", "never"],
      "symbol-description": "error",
      "template-tag-spacing": ["error", "never"],
      "yield-star-spacing": ["error", "after"],
      
      // Keep turbo rule as-is
      "turbo/no-undeclared-env-vars": "off",
    },
  },
];