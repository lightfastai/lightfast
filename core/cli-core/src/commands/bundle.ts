import { Command } from "commander";
import chalk from "chalk";
import { createCompiler, CompilationSpinner } from "@lightfastai/compiler";
import { resolve } from "path";
import { existsSync } from "fs";

export const bundleCommand = new Command("bundle")
  .description("Generate deployment bundles for cloud execution")
  .option("-c, --config <path>", "Path to lightfast.config.ts file")
  .option("-o, --output <dir>", "Output directory for bundles", ".lightfast/dist")
  .option("-f, --force", "Force regeneration even if cache is valid")
  .action(async (options: { config?: string; output?: string; force?: boolean }) => {
    const spinner = new CompilationSpinner("Generating deployment bundles...");
    spinner.start();

    try {
      // Find project root
      const projectRoot = process.cwd();

      // Check if config exists
      const configPath = options.config ?? "lightfast.config.ts";
      const resolvedConfigPath = resolve(projectRoot, configPath);

      if (!existsSync(resolvedConfigPath)) {
        spinner.stop();
        console.error(chalk.red(`âœ– Configuration file not found: ${configPath}`));
        console.error(chalk.red("\nCreate a lightfast.config.ts file to define your agents."));
        process.exit(1);
      }

      // Create compiler instance (bundles not generated by default anymore)
      const compiler = createCompiler({
        baseDir: projectRoot,
        generateBundles: false, // We'll use explicit method
      });

      // Generate bundles explicitly
      const result = await compiler.generateDeploymentBundles({
        configPath: resolvedConfigPath,
        force: options.force ?? false,
      });

      spinner.stop();
      console.log(chalk.green("âœ” Deployment bundles generated successfully!"));

      // Display results
      console.log(chalk.gray("\nðŸ“¦ Bundle Information:"));
      console.log(chalk.gray(`  Source: ${result.sourcePath}`));
      console.log(chalk.gray(`  Output: ${result.outputDir}`));
      console.log(chalk.gray(`  Bundles: ${result.bundles.length}`));

      result.bundles.forEach((bundle) => {
        console.log(chalk.gray(`    - ${bundle.id} (${bundle.hash}) - ${bundle.size} bytes`));
      });

      console.log(chalk.green("\nâœ¨ Bundles ready for deployment!"));
      console.log(chalk.gray("Deploy with: npx @lightfastai/cli deploy"));
    } catch (error) {
      spinner.stop();
      console.error(chalk.red("âœ– Failed to generate bundles"));
      console.error(chalk.red("\nError:"), error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });
