---
description: TypeScript standards and conventions for the React TD repository
globs: "**/*.ts,**/*.tsx"
alwaysApply: true
---

# React TD TypeScript Conventions

## Type Definitions
- Use strict TypeScript typing - avoid `any` types
- Create explicit interfaces for component props (e.g., `UpdateTextureLimitProps`)
- Define Store APIs with ReturnType pattern:
  ```typescript
  export type EdgeStoreApi = ReturnType<typeof createEdgeStore>;
  ```
- Use descriptive type names in PascalCase

## Type Imports
- Use specialized type imports:
  ```typescript
  import type { WebGLRootState } from "@repo/webgl";
  ```
- Separate type imports from implementation imports
- Prefer interfaces for publicly exposed APIs
- Use type aliases for complex types or unions

## Generics
- Leverage generics for reusable hooks and functions:
  ```typescript
  export const useNodeStore = <T,>(selector: (store: NodeStore) => T): T => {
    // Implementation
  };
  ```
- Provide descriptive type parameter names
- Use generic constraints appropriately
- Use default type parameters when appropriate

## Type Guards and Assertions
- Follow established typeguard patterns for data validation:
  ```typescript
  export const isExpression = (value: unknown): value is string => {
    return typeof value === 'string' && value.startsWith('$');
  };
  ```
- Avoid type assertions (`as`) when possible
- Use type predicates for runtime type checking
- Implement exhaustive checks with never type

## Enums and Constants
- Use string literal unions instead of enums when possible
- Use const assertions for immutable values:
  ```typescript
  const DIRECTIONS = ['up', 'down', 'left', 'right'] as const;
  type Direction = typeof DIRECTIONS[number];
  ```
- Define constants at the appropriate scope

## Best Practices
- Enable strict mode in tsconfig.json
- Avoid using non-null assertion operator (!)
- Use optional chaining (?.) and nullish coalescing (??) operators
- Prefer readonly arrays and properties for immutable data
- Use intersection types for composition
- Follow repository's established type patterns