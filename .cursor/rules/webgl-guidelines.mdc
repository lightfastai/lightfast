---
description: 
globs: 
alwaysApply: true
---

# React TD WebGL Guidelines

## Shader Management
- Organize shaders in dedicated files
- Use consistent naming for shader variables
- Properly initialize and update uniforms
- Use type-safe interfaces for shader props

## Render Pipeline
- Follow the established render pipeline pattern:
  ```typescript
  useFrame((state) => {
    Object.entries(targets).forEach(([key, target]) => {
      const run = onEachFrame[key];
      if (run) {
        run(state);
      }
      
      // Setup and render
      scene.clear();
      // ... more setup
      gl.setRenderTarget(target);
      gl.render(scene, camera);
      gl.setRenderTarget(null);
    });
  });
  ```
- Use optimized render loops
- Clear scene and targets appropriately
- Reset render targets after use
- Implement proper frame callbacks

## Resource Management
- Cache Three.js objects with useMemo:
  ```typescript
  const scene = useMemo(() => new THREE.Scene(), []);
  const camera = useMemo(
    () => new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1),
    [],
  );
  ```
- Properly dispose of Three.js resources in useEffect cleanup
- Avoid recreating objects on each render
- Use refs for objects that need to persist across renders
- Clear and clean up WebGL resources

## Expression Handling
- Follow the established pattern for expression evaluation:
  ```typescript
  export function useExpressionEvaluator() {
    // Configuration
    
    const evaluate = useCallback(
      (expression: string | number | undefined, state: WebGLRootState, defaultValue = 0): number => {
        // Evaluation logic
      },
      [dependencies]
    );
    
    // More implementation
    
    return {
      evaluate,
      // Other exports
    };
  }
  ```
- Use type-safe expression handlers
- Implement proper caching for expressions
- Support both numeric values and string expressions
- Provide useful default values

## Three.js Component Architecture
- Use the React Three Fiber pattern for components
- Follow established component hierarchy
- Separate rendering logic from state management
- Implement proper camera and control setup
- Use consistent naming for Three.js components

## Performance Considerations
- Minimize object creation in render loops
- Use instancing for repeated geometries
- Implement proper LOD (Level of Detail) when applicable
- Optimize shader complexity
- Cache computed values and references
- Follow established patterns for uniform updating 