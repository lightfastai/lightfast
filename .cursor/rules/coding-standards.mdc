---
description: General coding practices and principles for the React TD repository
globs: "**/*"
alwaysApply: true
---

# React TD Repository Coding Standards

## Project Structure
- Monorepo using Turborepo and pnpm workspaces
- Apps defined in `/apps` directory (app, www)
- Shared packages in `/packages` directory (ai, lib, ui, webgl)
- Vendor packages in `/vendor` directory

## TypeScript Standards
- Use strict TypeScript typing - avoid `any` types
- Follow established type patterns in existing files
- Define explicit interfaces for props and state
- Use generics for reusable components and hooks
- Import types separately from implementation

## Component Architecture
- Use functional components with hooks
- Create custom hooks for reusable logic (like the existing `use-*` pattern)
- Follow React's best practices for memoization
- Keep components small and focused on a single responsibility

## Hooks Best Practices
- Cache references with `useRef` for values that shouldn't trigger re-renders
- Use `useMemo` and `useCallback` appropriately to optimize performance
- Handle cleanup in `useEffect` hooks
- Follow dependency array best practices

## Three.js and WebGL Guidelines
- Follow established WebGL patterns in the repository
- Properly dispose of Three.js resources to prevent memory leaks
- Use the shader cache pattern for performance
- Follow the established pattern for uniform updating

## Naming Conventions
- Hooks: `use{Feature}` (e.g., `useUpdateTextureLimit`, `useExpressionEvaluator`)
- Components: PascalCase (e.g., `TextureEditor`, `Inspector`)
- Files: kebab-case (e.g., `use-update-texture-limit.ts`)
- Types/Interfaces: PascalCase (e.g., `UpdateTextureLimitProps`)
- Internal variables: camelCase

## File Organization
- Group related hooks in `/hooks` directories
- Group providers in `/providers` directories
- Follow existing naming patterns for new files
- Keep index files minimal and focused on exports

## State Management
- Use React context with stores for shared state
- Follow the established pattern with provider components
- Use selectors to access only needed state

## Performance Considerations
- Cache computed values with `useMemo`
- Cache event handlers with `useCallback`
- Reference cached values in dependencies
- Store shared data in refs when appropriate

## Reference Files

### Eslint
- [base.js](mdc:internal/eslint/base.js)
- [nextjs.js](mdc:internal/eslint/nextjs.js)
- [react.js](mdc:internal/eslint/react.js)

### TSConfig
- [base.js](mdc:internal/eslint/base.js)
- [internal-package.json](mdc:internal/typescript/internal-package.json)
- [react-library.json](mdc:internal/typescript/react-library.json)

### Prettier
- [index.js](mdc:internal/prettier/index.js)
