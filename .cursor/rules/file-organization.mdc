---
description: File structure and naming conventions for the React TD repository
globs: "**/*"
alwaysApply: true
---

# React TD File Organization

## Directory Structure
- Group related functionality within feature-based directories
- Organize hooks in `/hooks` directories
- Group providers in `/providers` directories
- Place shared utilities in `/utils` directories
- Store types and interfaces in `/types` directories
- Keep component structure consistent across the repository

## File Naming
- Components: PascalCase (e.g., `TextureEditor.tsx`)
- Hooks: kebab-case with `use-` prefix (e.g., `use-update-texture-limit.ts`)
- Providers: kebab-case with `-provider` suffix (e.g., `edge-store-provider.tsx`)
- Stores: kebab-case with `-store` suffix (e.g., `node-store.ts`)
- Utilities: kebab-case, descriptive of functionality (e.g., `texture-utils.ts`)
- Types: kebab-case, descriptive of domain (e.g., `node-types.ts`)
- Test files: same name as the file being tested with `.test` or `.spec` suffix

## Export Patterns
- Use named exports for most files
- Avoid default exports unless for top-level components
- Export types and interfaces from the same file as implementation
- Use barrel files (index.ts) for grouped exports:
  ```typescript
  // Export components
  export {
    WebGLCanvas,
    WebGLView,
    createWebGLPortal,
    OrbitControls,
    PerspectiveCamera,
  } from "@repo/webgl/components";
  ```
- Keep barrel files minimal and focused

## Import Patterns
- Import from barrel files when available
- Use consistent path aliasing (`@repo/*`, `@vendor/*`)
- Import types separately from implementations
- Use relative imports for closely related files
- Follow established import order

## Module Boundaries
- Respect package boundaries - don't import private implementation details
- Export public APIs through barrel files
- Document module boundaries clearly
- Use consistent patterns for cross-package dependencies
- Follow established patterns for importing from other packages

## Code Organization Within Files
- Follow consistent file structure:
  1. Imports (grouped by type)
  2. Type definitions / interfaces
  3. Constants
  4. Helper functions
  5. Main implementation
  6. Exports
- Keep files focused on a single responsibility
- Split large files into smaller, focused ones
- Place related utilities in the same file 