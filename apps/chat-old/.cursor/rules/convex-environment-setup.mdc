---
description: Environment setup automation for Convex projects with type-safe validation and sync scripts
globs: ["scripts/**/*", "src/env.ts", ".env*"]
alwaysApply: false
---

- Reference @convex-rules.mdc for core Convex patterns and @convex-vercel-deployment.mdc for deployment workflows
- Always create .env.local file with NEXT_PUBLIC_CONVEX_URL=http://127.0.0.1:3210 and required API keys for local development
- Use the enhanced sync script (`pnpm env:sync`) to automatically sync environment variables from .env.local to Convex with colored output and error handling
- Configure separate CONVEX_DEPLOY_KEY environment variables in Vercel for Production (production scope) and Preview (preview scope) deployments
- Generate deploy keys from Convex Dashboard → Settings → Generate Production/Preview Deploy Key
- Set up package.json scripts for streamlined development: `setup`, `dev:all`, `env:sync`, `env:check`, `status`, `logs`
- Always validate environment variables using @t3-oss/env-nextjs with proper client/server separation and type safety
- Use environment helpers (isDevelopment, isPreview, isProduction) for conditional logic based on deployment stage
- Never commit .env.local files to version control - add to .gitignore
- Configure Vercel build commands: `npx convex deploy --cmd 'pnpm build'` for production, add `--preview-run 'setupInitialData'` for preview deployments
- Always test environment setup locally before pushing to preview or production deployments

## Quick Start Setup
```bash
# 1. Initial project setup
pnpm install
npx convex dev --once  # Initialize Convex project

# 2. Create local environment file (.env.local)
NEXT_PUBLIC_CONVEX_URL=http://127.0.0.1:3210
OPENAI_API_KEY=your_openai_api_key_here
NEXT_PUBLIC_APP_ENV=development

# 3. Sync environment variables and start development
pnpm env:sync
pnpm dev:all  # Starts both Next.js and Convex concurrently
```

## Environment Variable Reference

### Local Development (.env.local)
- NEXT_PUBLIC_CONVEX_URL=http://127.0.0.1:3210
- NEXT_PUBLIC_APP_ENV=development
- OPENAI_API_KEY=sk-your-openai-key (synced to Convex)
- NODE_ENV=development

### Vercel Production Environment
- CONVEX_DEPLOY_KEY=production-deploy-key (Production scope only)
- NEXT_PUBLIC_CONVEX_URL=auto-set by Convex deploy
- NEXT_PUBLIC_APP_ENV=production

### Vercel Preview Environment
- CONVEX_DEPLOY_KEY=preview-deploy-key (Preview scope only)
- NEXT_PUBLIC_CONVEX_URL=auto-set by Convex deploy
- NEXT_PUBLIC_APP_ENV=preview

## Enhanced Package.json Scripts
```json
{
  "scripts": {
    "setup": "pnpm install && pnpm env:sync && echo '✅ Setup complete!'",
    "dev:all": "concurrently \"pnpm dev\" \"pnpm convex:dev\" --names \"NEXT,CONVEX\"",
    "env:sync": "./scripts/sync-env.sh",
    "env:check": "npx convex env list",
    "deploy:preview": "git push origin HEAD",
    "deploy:prod": "git checkout main && git merge - && git push origin main",
    "status": "npx convex status",
    "logs": "npx convex logs"
  }
}
```

## Environment Validation (src/env.ts)
```typescript
import { createEnv } from "@t3-oss/env-nextjs"
import { z } from "zod"

export const env = createEnv({
  client: {
    NEXT_PUBLIC_CONVEX_URL: z.string().url(),
    NEXT_PUBLIC_APP_ENV: z.enum(["development", "preview", "production"]).default("development"),
  },
  runtimeEnv: {
    NEXT_PUBLIC_CONVEX_URL: process.env.NEXT_PUBLIC_CONVEX_URL,
    NEXT_PUBLIC_APP_ENV: process.env.NEXT_PUBLIC_APP_ENV,
  },
  skipValidation: !!process.env.SKIP_ENV_VALIDATION,
  emptyStringAsUndefined: true,
})

// Environment helpers
export const isDevelopment = env.NEXT_PUBLIC_APP_ENV === "development"
export const isPreview = env.NEXT_PUBLIC_APP_ENV === "preview"
export const isProduction = env.NEXT_PUBLIC_APP_ENV === "production"
```

## Enhanced Sync Script (scripts/sync-env.sh)
```bash
#!/bin/bash
set -e

# Configuration
REQUIRED_VARS=("OPENAI_API_KEY")
OPTIONAL_VARS=("ANTHROPIC_API_KEY" "GOOGLE_API_KEY")

# Colored logging functions
log_success() { echo -e "\033[0;32m✅ $1\033[0m"; }
log_error() { echo -e "\033[0;31m❌ $1\033[0m"; }

# Check .env.local exists
if [ ! -f ".env.local" ]; then
    log_error ".env.local file not found"
    exit 1
fi

# Sync function with error handling
sync_var() {
    local var_name=$1
    local var_value=${!var_name}

    if [ -n "$var_value" ]; then
        npx convex env set "$var_name" "$var_value" > /dev/null 2>&1
        log_success "Synced $var_name"
    fi
}

# Load and sync environment variables
source .env.local
for var in "${REQUIRED_VARS[@]}"; do sync_var "$var"; done
for var in "${OPTIONAL_VARS[@]}"; do sync_var "$var"; done
```

## Troubleshooting Commands
- `npx convex status` - Check current deployment status
- `npx convex env list` - List all environment variables
- `vercel env ls` - List Vercel environment variables
- `pnpm env:sync` - Re-sync local environment variables
- `vercel logs` - Check deployment logs
- `npx convex dev --reset` - Reset Convex development environment

## Vercel Configuration Steps
1. Create Vercel project and link to GitHub repository
2. Generate Production and Preview deploy keys from Convex Dashboard
3. Add CONVEX_DEPLOY_KEY to Vercel environment variables (separate for Production/Preview scopes)
4. Configure build commands in Vercel settings
5. Test deployments with feature branch push (preview) and main branch push (production)
