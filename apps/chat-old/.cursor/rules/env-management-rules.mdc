---
description: Environment variable management patterns for Convex projects, including sync scripts and best practices
globs: ["scripts/*.sh", ".env.local", "convex/**/*.ts", "**/*.ts", "**/*.tsx"]
alwaysApply: false
---

# Environment Variable Management with Convex

## Environment Sync Script Pattern
- **Script Location**: `scripts/sync-env.sh`
- **Purpose**: Sync environment variables from `.env.local` to Convex deployment
- **Usage**: Run `./scripts/sync-env.sh` or `bash scripts/sync-env.sh` to sync variables

## Script Implementation Best Practices
The sync script uses a robust parsing approach that:
- Only processes lines matching the `KEY=value` pattern
- Skips comments and empty lines
- Validates variable names before export
- Strips inline comments to prevent parsing errors
- Provides clear error messages

```bash
# Function to safely load environment variables
load_env_vars() {
    if [ -f ".env.local" ]; then
        while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue

            # Only process lines that look like KEY=value
            if [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
                # Strip inline comments (everything after #)
                clean_line=$(echo "$line" | sed 's/[[:space:]]*#.*$//')
                export "$clean_line"
            fi
        done < ".env.local"
    fi
}
```

## Adding New Environment Variables
When adding new environment variables that need to be shared with Convex:

1. **Add to .env.local**: Add the variable to your local `.env.local` file
```bash
NEW_API_KEY=your_api_key_here
```

2. **Add to sync script**: Add the sync logic to `scripts/sync-env.sh`:
```bash
if [ -n "$NEW_API_KEY" ]; then
    npx convex env set NEW_API_KEY "$NEW_API_KEY"
    echo "✅ Synced NEW_API_KEY"
else
    echo "⚠️  NEW_API_KEY not found in .env.local"
fi
```

3. **Run sync**: Execute the script to sync the new variable
```bash
./scripts/sync-env.sh
```

## .env.local File Format
Your `.env.local` file should contain only valid environment variable definitions:

```bash
# ✅ CORRECT format
OPENAI_API_KEY=sk-proj-...
STRIPE_SECRET_KEY=sk_test_...
RESEND_API_KEY=re_...

# ✅ ALSO CORRECT - inline comments are supported
CONVEX_DEPLOYMENT=local:local-lightfast-lightfast_chat # team: lightfast, project: lightfast-chat

# ❌ AVOID these formats (will cause export errors)
# team: lightfast, project: lightfast-chat
# deployment: local
# [config]
```

## Troubleshooting Export Errors
If you see errors like `export: 'team:' not a valid identifier`:
1. Check your `.env.local` file for invalid formats
2. Remove any YAML-style or configuration content
3. Ensure all lines follow the `KEY=value` format
4. Comments should start with `#` at the beginning of the line
5. Inline comments are supported and will be automatically stripped

## Environment Variable Best Practices
- **Local Development**: Store sensitive keys in `.env.local` (gitignored)
- **Convex Backend**: Use the sync script to push variables to Convex
- **Validation**: The script checks if variables exist before syncing
- **Security**: Never commit `.env.local` or API keys to version control
- **Naming**: Use descriptive, UPPERCASE names with underscores

## Common Environment Variables for Convex Projects
- `OPENAI_API_KEY` - For AI integrations (already configured)
- `STRIPE_SECRET_KEY` - For payment processing
- `RESEND_API_KEY` - For email sending
- `CLERK_SECRET_KEY` - For authentication
- `UPLOADTHING_SECRET` - For file uploads

## Development Workflow
1. Add environment variables to `.env.local`
2. Update `scripts/sync-env.sh` with new variables
3. Run sync script to push to Convex
4. Access variables in Convex functions using `process.env.VARIABLE_NAME`

## Script Permissions
Make sure the script is executable:
```bash
chmod +x scripts/sync-env.sh
```

## Accessing Environment Variables in Convex
In Convex actions (not queries/mutations), access synced environment variables:
```typescript
export const someAction = internalAction({
  args: {},
  returns: v.null(),
  handler: async (ctx, args) => {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error("OPENAI_API_KEY not configured");
    }
    // Use the API key...
  },
});
```

## Environment Management Commands
- **List all Convex env vars**: `npx convex env list`
- **Get specific var**: `npx convex env get VARIABLE_NAME`
- **Remove var**: `npx convex env remove VARIABLE_NAME`
- **Sync all vars**: `./scripts/sync-env.sh`
