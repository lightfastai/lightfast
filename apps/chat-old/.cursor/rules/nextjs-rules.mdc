---
description:
globs:
alwaysApply: true
---
# Next.js Project Configuration

This project uses Next.js with specific configurations and preferences.

## Version Configuration
- **Next.js Version**: `next@canary` (15.4.0-canary.77 or later)
- **Reason**: We use the canary version to access experimental features like PPR (Partial Prerendering)
- **React Version**: React 19.x

## Configuration File Standards
- **Configuration File**: `next.config.ts` (TypeScript configuration file)
- **NOT**: `next.config.js` - We prefer TypeScript for all configuration files
- **Environment Import**: Always import `"./src/env.ts"` at the top of `next.config.ts`

Example `next.config.ts`:
```typescript
import type { NextConfig } from "next"
import "./src/env.ts"

const nextConfig: NextConfig = {
  experimental: {
    ppr: true,
  },
}

export default nextConfig
```

## Experimental Features
- **PPR (Partial Prerendering)**: ALWAYS enabled via `experimental.ppr: true`
- **Purpose**: Combines static and dynamic rendering for optimal performance
- **Benefits**: Static shell with dynamic content streaming

## App Router Configuration
- **Router**: App Router (default in Next.js 13+, mandatory for this project)
- **Pages Directory**: `src/app/` for all pages and layouts
- **Root Layout**: `src/app/layout.tsx`
- **File Structure**: Use file-based routing with App Router conventions

## TypeScript Configuration
- **Strict Mode**: ALWAYS enabled (`"strict": true`)
- **Target**: ES2017 minimum
- **Module Resolution**: Bundler
- **Path Aliases**: Configured in `tsconfig.json`
  - `@/*` maps to `src/*`
  - `@/components/ui` for shadcn/ui components
  - `@/lib` for utility functions
  - `@/app` for app router pages

## Environment Variables
- **Validation Library**: `@t3-oss/env-nextjs` for type-safe environment variables
- **Configuration File**: `src/env.ts`
- **Client Variables**: Must be prefixed with `NEXT_PUBLIC_`
- **Import Pattern**: ALWAYS import from `@/env`, never from `process.env`

## Build and Development Commands
- **Dev Command**: `pnpm dev` (preferred) or `npm run dev`
- **Build Command**: `pnpm build` (preferred) or `npm run build`
- **Start Command**: `pnpm start` (preferred) or `npm run start`
- **Package Manager**: pnpm is preferred over npm

## Key Dependencies
- `next@canary` - Framework with experimental features
- `react@^19` - React 19 for latest features
- `typescript` - TypeScript support
- `@t3-oss/env-nextjs` - Environment validation
- `tailwindcss@^4` - Styling (Tailwind CSS v4)
- `convex` - Backend and real-time database

## Performance Features
- **PPR**: Partial Prerendering for optimal static/dynamic balance
- **App Router**: Built-in optimizations and file-based routing
- **Static Generation**: Automatic optimization for static content
- **Streaming**: React 19 streaming capabilities

## Import Standards
ALWAYS use path aliases for clean imports:

```tsx
// ✅ CORRECT - Use path aliases
import { Button } from "@/components/ui/button"
import { env } from "@/env"
import { ConvexClientProvider } from "@/lib/ConvexProvider"
import type { NextConfig } from "next"

// ❌ INCORRECT - Relative imports
import { Button } from "../../components/ui/button"
import { env } from "../../../env"
import { ConvexClientProvider } from "../lib/ConvexProvider"
```

## Environment Variable Usage
```tsx
// ✅ CORRECT - Type-safe environment access
import { env } from "@/env"
const convexUrl = env.NEXT_PUBLIC_CONVEX_URL

// ❌ INCORRECT - Direct process.env access
const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL!
```

## Development Preferences (MANDATORY)
1. **TypeScript First**: Always use TypeScript for configuration files (`next.config.ts` not `.js`)
2. **Next.js Canary**: Prefer Next.js canary for latest features and PPR
3. **App Router Only**: Use App Router over Pages Router
4. **Type-safe Environment**: Type-safe environment variables are mandatory
5. **PPR Enabled**: Always leverage PPR for performance optimization
6. **Path Aliases**: Use path aliases (`@/`) for all imports
7. **Environment Validation**: Import environment variables from `@/env` not `process.env`
8. **pnpm Package Manager**: Prefer pnpm over npm for package management

## File Structure Standards
```
src/
├── app/                 # App Router pages
│   ├── layout.tsx      # Root layout
│   ├── page.tsx        # Home page
│   └── globals.css     # Global styles
├── components/
│   └── ui/             # shadcn/ui components
├── lib/                # Utility functions
└── env.ts              # Environment validation
```

## Build Configuration Requirements
- Next.js canary version
- PPR experimental feature enabled
- TypeScript configuration file
- Environment validation import
- Path aliases configured
- Strict TypeScript mode
