{
  "openapi": "3.1.0",
  "info": {
    "title": "Lightfast Memory API",
    "version": "1.0.0",
    "description": "Real-time semantic search across all your company's data sources. Enables AI tools, custom agents, and applications to access company knowledge through a unified, type-safe API.",
    "contact": {
      "name": "Lightfast Support",
      "email": "support@lightfast.ai",
      "url": "https://lightfast.ai"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.lightfast.ai/v1",
      "description": "Production API"
    },
    {
      "url": "http://localhost:3000/v1",
      "description": "Local development"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Memory",
      "description": "Operations for managing and searching memories"
    }
  ],
  "paths": {
    "/memories": {
      "post": {
        "tags": ["Memory"],
        "summary": "Add Memory",
        "description": "Index new content into a collection. The content will be automatically embedded and made searchable within 2 seconds.",
        "operationId": "addMemory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemoryRequest"
              },
              "examples": {
                "github-pr": {
                  "summary": "Index GitHub PR",
                  "value": {
                    "collection": "github-lightfast",
                    "id": "pr-127",
                    "content": "Title: Refactor authentication system\n\nThis PR refactors the auth system to use session-based authentication instead of JWT tokens. Key changes:\n\n- Migrated from JWT to sessions\n- Added Redis session store\n- Updated middleware for session handling\n- Improved security with CSRF protection",
                    "metadata": {
                      "type": "pr",
                      "source": "github",
                      "title": "Refactor authentication system",
                      "url": "https://github.com/lightfast/lightfast/pull/127",
                      "authorId": "user-123",
                      "authorName": "jsmith",
                      "createdAt": "2025-01-15T10:30:00Z",
                      "updatedAt": "2025-01-16T14:22:00Z",
                      "labels": ["enhancement", "security"],
                      "relatedIds": ["issue-89", "linear-auth-12"]
                    }
                  }
                },
                "discord-message": {
                  "summary": "Index Discord Message",
                  "value": {
                    "collection": "discord-123456",
                    "id": "message-987654321",
                    "content": "@jsmith mentioned we should use Redis for session storage instead of in-memory store. This would allow horizontal scaling and session persistence across deploys.",
                    "metadata": {
                      "type": "message",
                      "source": "discord",
                      "authorId": "234567890",
                      "authorName": "mjones",
                      "createdAt": "2025-01-14T16:45:00Z",
                      "url": "https://discord.com/channels/123456/789012/987654321",
                      "parentId": "thread-789012",
                      "tags": ["architecture", "redis"]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMemoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "tags": ["Memory"],
        "summary": "List Memories",
        "description": "Retrieve a list of memories from a collection with pagination support.",
        "operationId": "listMemories",
        "parameters": [
          {
            "name": "collection",
            "in": "query",
            "required": true,
            "description": "Collection to retrieve memories from",
            "schema": {
              "type": "string",
              "example": "github-lightfast"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of memories to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of memories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMemoriesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/memories/{collection}/{id}": {
      "get": {
        "tags": ["Memory"],
        "summary": "Get Memory",
        "description": "Retrieve a specific memory by its collection and ID.",
        "operationId": "getMemory",
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "description": "Collection containing the memory",
            "schema": {
              "type": "string",
              "example": "github-lightfast"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the memory",
            "schema": {
              "type": "string",
              "example": "pr-127"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": ["Memory"],
        "summary": "Update Memory",
        "description": "Update existing memory content or metadata. Content updates trigger re-embedding.",
        "operationId": "updateMemory",
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "description": "Collection containing the memory",
            "schema": {
              "type": "string",
              "example": "github-lightfast"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the memory",
            "schema": {
              "type": "string",
              "example": "pr-127"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemoryRequest"
              },
              "examples": {
                "update-content": {
                  "summary": "Update content and metadata",
                  "value": {
                    "content": "Title: Refactor authentication system\n\nUpdated description with implementation details...\n\nAdditional commits:\n- Added session middleware tests\n- Fixed CSRF token validation",
                    "metadata": {
                      "updatedAt": "2025-01-17T09:15:00Z"
                    }
                  }
                },
                "update-metadata": {
                  "summary": "Update metadata only",
                  "value": {
                    "metadata": {
                      "labels": ["enhancement", "security", "needs-review"],
                      "updatedAt": "2025-01-17T10:00:00Z"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMemoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": ["Memory"],
        "summary": "Delete Memory",
        "description": "Remove a memory from the index. This operation is irreversible.",
        "operationId": "deleteMemory",
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "description": "Collection containing the memory",
            "schema": {
              "type": "string",
              "example": "github-lightfast"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the memory",
            "schema": {
              "type": "string",
              "example": "pr-127"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Memory successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMemoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/memories/search": {
      "post": {
        "tags": ["Memory"],
        "summary": "Search Memories",
        "description": "Perform semantic search across memories using natural language queries. Results are ranked by relevance and can be filtered by metadata.",
        "operationId": "searchMemories",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMemoryRequest"
              },
              "examples": {
                "simple-search": {
                  "summary": "Simple search",
                  "value": {
                    "query": "auth refactor"
                  }
                },
                "filtered-search": {
                  "summary": "Filtered search with metadata",
                  "value": {
                    "query": "what is blocking the auth milestone?",
                    "collections": ["linear-team-eng", "github-lightfast"],
                    "filter": {
                      "type": ["issue", "pr"],
                      "labels": ["auth"],
                      "createdAfter": "2025-01-01T00:00:00Z"
                    },
                    "limit": 10
                  }
                },
                "cross-source": {
                  "summary": "Cross-source search",
                  "value": {
                    "query": "Redis session storage implementation",
                    "collections": ["github-lightfast", "discord-123456", "notion-team"],
                    "filter": {
                      "source": ["github", "discord", "notion"],
                      "createdAfter": "2025-01-10T00:00:00Z"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMemoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key",
        "description": "Use your Lightfast API key as the bearer token"
      }
    },
    "schemas": {
      "MemoryMetadata": {
        "type": "object",
        "description": "Structured metadata for filtering and context",
        "required": ["type", "source", "createdAt"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["pr", "issue", "message", "page", "doc", "custom"],
            "description": "Type of content"
          },
          "source": {
            "type": "string",
            "enum": ["github", "discord", "slack", "linear", "notion", "custom"],
            "description": "Data source"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp in ISO 8601 format"
          },
          "authorId": {
            "type": "string",
            "description": "Unique identifier of the author"
          },
          "authorName": {
            "type": "string",
            "description": "Display name of the author"
          },
          "authorAvatar": {
            "type": "string",
            "format": "uri",
            "description": "Avatar URL of the author"
          },
          "title": {
            "type": "string",
            "description": "Title or heading of the content"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Direct link to the source content"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Category labels"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Descriptive tags"
          },
          "parentId": {
            "type": "string",
            "description": "ID of parent entity (thread, PR, etc.)"
          },
          "relatedIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of related entities"
          }
        },
        "additionalProperties": true
      },
      "MemoryFilter": {
        "type": "object",
        "description": "Filter criteria for searching memories",
        "properties": {
          "type": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter by content type"
          },
          "source": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter by data source"
          },
          "authorId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter by author ID"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Match ANY of these labels"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Match ANY of these tags"
          },
          "createdAfter": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by creation date (after this timestamp)"
          },
          "createdBefore": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by creation date (before this timestamp)"
          }
        },
        "additionalProperties": true
      },
      "Memory": {
        "type": "object",
        "required": ["id", "collection", "content", "metadata", "embedding", "createdAt"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "content": {
            "type": "string",
            "description": "Full text content"
          },
          "metadata": {
            "$ref": "#/components/schemas/MemoryMetadata"
          },
          "embedding": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Vector embedding"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "SearchResult": {
        "type": "object",
        "required": ["id", "collection", "content", "metadata", "score", "snippet"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "content": {
            "type": "string",
            "description": "Full text content"
          },
          "metadata": {
            "$ref": "#/components/schemas/MemoryMetadata"
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Similarity score (0-1)"
          },
          "snippet": {
            "type": "string",
            "description": "Highlighted excerpt from content"
          }
        }
      },
      "AddMemoryRequest": {
        "type": "object",
        "required": ["collection", "id", "content"],
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection name (e.g., github-lightfast)",
            "example": "github-lightfast"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this memory",
            "example": "pr-127"
          },
          "content": {
            "type": "string",
            "description": "Text content to index (max 8,000 tokens)",
            "maxLength": 32000
          },
          "metadata": {
            "$ref": "#/components/schemas/MemoryMetadata"
          },
          "embedding": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Pre-computed embedding vector (auto-generated if omitted)"
          }
        }
      },
      "AddMemoryResponse": {
        "type": "object",
        "required": ["success", "id", "collection"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          },
          "id": {
            "type": "string",
            "description": "Memory ID"
          },
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "embedding": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Generated embedding (if auto-generated)"
          }
        }
      },
      "ListMemoriesResponse": {
        "type": "object",
        "required": ["memories", "total", "limit", "offset"],
        "properties": {
          "memories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Memory"
            },
            "description": "List of memories"
          },
          "total": {
            "type": "integer",
            "description": "Total number of memories in collection"
          },
          "limit": {
            "type": "integer",
            "description": "Number of results returned"
          },
          "offset": {
            "type": "integer",
            "description": "Pagination offset"
          }
        }
      },
      "UpdateMemoryRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "New content (triggers re-embedding)",
            "maxLength": 32000
          },
          "metadata": {
            "type": "object",
            "description": "Metadata to update (merged with existing)",
            "additionalProperties": true
          }
        }
      },
      "UpdateMemoryResponse": {
        "type": "object",
        "required": ["success", "id", "collection", "updatedAt"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          },
          "id": {
            "type": "string",
            "description": "Memory ID"
          },
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update timestamp"
          }
        }
      },
      "DeleteMemoryResponse": {
        "type": "object",
        "required": ["success", "id", "collection"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          },
          "id": {
            "type": "string",
            "description": "Deleted memory ID"
          },
          "collection": {
            "type": "string",
            "description": "Collection name"
          }
        }
      },
      "SearchMemoryRequest": {
        "type": "object",
        "required": ["query"],
        "properties": {
          "query": {
            "type": "string",
            "description": "Natural language search query",
            "example": "auth refactor"
          },
          "collections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Limit search to specific collections"
          },
          "filter": {
            "$ref": "#/components/schemas/MemoryFilter"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20,
            "description": "Maximum results to return"
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "description": "Pagination offset"
          },
          "minScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 0.7,
            "description": "Minimum similarity score"
          }
        }
      },
      "SearchMemoryResponse": {
        "type": "object",
        "required": ["results", "total", "took", "query"],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            },
            "description": "Search results ranked by relevance"
          },
          "total": {
            "type": "integer",
            "description": "Total matching results"
          },
          "took": {
            "type": "integer",
            "description": "Query time in milliseconds"
          },
          "query": {
            "type": "string",
            "description": "Original search query"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Machine-readable error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": "object",
            "description": "Additional error context",
            "additionalProperties": true
          },
          "requestId": {
            "type": "string",
            "description": "Request ID for support debugging"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Invalid request parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "invalid_request",
              "message": "Invalid collection name format",
              "requestId": "req_abc123"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Invalid or missing API key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "authentication_failed",
              "message": "Invalid API key provided",
              "requestId": "req_abc123"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "resource_not_found",
              "message": "Memory not found in collection",
              "requestId": "req_abc123"
            }
          }
        }
      },
      "Conflict": {
        "description": "Resource already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "conflict",
              "message": "Memory with this ID already exists",
              "requestId": "req_abc123"
            }
          }
        }
      },
      "RateLimitExceeded": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "retryAfter": {
                      "type": "integer",
                      "description": "Seconds to wait before retry"
                    }
                  }
                }
              ]
            },
            "example": {
              "error": "rate_limit_exceeded",
              "message": "Rate limit exceeded. Retry after 42 seconds.",
              "retryAfter": 42,
              "requestId": "req_abc123"
            }
          }
        },
        "headers": {
          "X-RateLimit-Limit": {
            "schema": {
              "type": "integer"
            },
            "description": "Request limit per minute"
          },
          "X-RateLimit-Remaining": {
            "schema": {
              "type": "integer"
            },
            "description": "Remaining requests"
          },
          "X-RateLimit-Reset": {
            "schema": {
              "type": "integer"
            },
            "description": "Unix timestamp for rate limit reset"
          }
        }
      },
      "InternalError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "internal_error",
              "message": "An unexpected error occurred",
              "requestId": "req_abc123"
            }
          }
        }
      }
    }
  }
}