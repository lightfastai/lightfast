:root {
  /* Single progress variable (0 to 1) set by JavaScript */
  --wheel-progress: 0;

  /* Viewport variables (set by JavaScript) */
  --viewport-width: 100vw;
  --viewport-height: 100vh;
  --container-width: calc(100vw - 64px);
  --container-height: calc(100vh - 128px);

  /* Grid constants */
  --grid-size: 12;
  --grid-offset-x: 32px;
  --grid-offset-y: 64px;
  --center-start: 5;
  --center-size: 2;

  /* Calculated grid dimensions */
  --cell-width: calc(var(--container-width) / var(--grid-size));
  --cell-height: calc(var(--container-height) / var(--grid-size));

  /* Animation phases calculated purely in CSS */
  --text-fade-phase: min(calc(var(--wheel-progress) / 0.3), 1);
  --logo-move-phase: min(max(0, calc((var(--wheel-progress) - 0.1) / 0.4)), 1);
  --expansion-phase: min(max(0, calc((var(--wheel-progress) - 0.2) / 0.6)), 1);
  --category-phase: min(max(0, calc((var(--wheel-progress) - 0.5) / 0.5)), 1);

  /* Center card sizing */
  --cc-start-size: min(
    600px,
    calc(min(var(--viewport-width), var(--viewport-height)) * 0.6)
  );
  --cc-final-size: calc(
    min(var(--cell-width), var(--cell-height)) * var(--center-size)
  );
  --cc-current-size: calc(
    var(--cc-start-size) + (var(--cc-final-size) - var(--cc-start-size)) *
      var(--expansion-phase)
  );

  /* Center card positions */
  --cc-start-x: calc(var(--viewport-width) / 2);
  --cc-start-y: calc(var(--viewport-height) / 2);
  --cc-final-x: calc(
    var(--grid-offset-x) + (var(--center-start) + var(--center-size) / 2) *
      var(--cell-width)
  );
  --cc-final-y: calc(
    var(--grid-offset-y) + (var(--center-start) + var(--center-size) / 2) *
      var(--cell-height)
  );
  --cc-current-x: calc(
    var(--cc-start-x) + (var(--cc-final-x) - var(--cc-start-x)) *
      var(--expansion-phase)
  );
  --cc-current-y: calc(
    var(--cc-start-y) + (var(--cc-final-y) - var(--cc-start-y)) *
      var(--expansion-phase)
  );

  /* Component opacity and scale */
  --grid-lines-opacity: calc(1 - var(--expansion-phase) * 0.8);
  --integration-container-opacity: calc(
    max(0, min(1, (var(--expansion-phase) - 0.3) / 0.1)) * var(--category-phase)
  );
  --integration-card-opacity: var(--category-phase);
  --integration-card-scale: calc(0.8 + var(--category-phase) * 0.2);

  /* Text and logo animation */
  --text-opacity: calc(1 - var(--text-fade-phase));
  --logo-move-factor: var(--logo-move-phase);
}

/* PERFORMANCE OPTIMIZED: Transform-based center card animation */
.optimized-center-card {
  /* Use transforms for GPU acceleration instead of layout properties */
  position: absolute;
  width: var(--cc-current-size);
  height: var(--cc-current-size);
  left: calc(var(--cc-current-x) - var(--cc-current-size) / 2);
  top: calc(var(--cc-current-y) - var(--cc-current-size) / 2);

  /* Performance optimizations */
  will-change: transform, width, height;
  contain: layout style paint;

  /* Instant transitions - no more delays */
  transition: none;
}

/* Center card text with pure CSS opacity animation */
.center-card-text {
  opacity: var(--text-opacity);
  transition: opacity 0.2s ease-out;
  will-change: opacity;
}

/* Center card logo with pure CSS transform animation */
.center-card-logo {
  width: 48px;
  height: 48px;

  /* Logo position interpolation using pure CSS */
  --logo-start-x: 32px;
  --logo-start-y: calc(var(--cc-current-size) - 32px - 48px);
  --logo-final-x: calc((var(--cc-current-size) - 48px) / 2);
  --logo-final-y: calc((var(--cc-current-size) - 48px) / 2);

  --logo-current-x: calc(
    var(--logo-start-x) + (var(--logo-final-x) - var(--logo-start-x)) *
      var(--logo-move-factor)
  );
  --logo-current-y: calc(
    var(--logo-start-y) + (var(--logo-final-y) - var(--logo-start-y)) *
      var(--logo-move-factor)
  );

  left: var(--logo-current-x);
  top: var(--logo-current-y);

  /* Performance optimizations */
  will-change: left, top;
  transition: none;
}

/* Legacy center card (keeping for compatibility) */
.animated-center-card {
  width: var(--global-cc-current-width);
  height: var(--global-cc-current-height);
  left: var(--global-cc-current-left);
  top: var(--global-cc-current-top);
  position: absolute;
  overflow: hidden;
}

/* PERFORMANCE OPTIMIZED: Grid lines with instant response */
.optimized-grid-lines {
  opacity: var(--grid-lines-opacity);
  transition: opacity 0.2s ease-out;
  will-change: opacity;
}

/* Grid line elements - no transitions for instant response */
.grid-line-h-top-left {
  position: absolute;
  height: 1px;
  background-color: hsl(var(--border));
  top: calc(var(--cc-current-y) - var(--cc-current-size) / 2);
  left: 0;
  width: calc(var(--cc-current-x) - var(--cc-current-size) / 2);
}

.grid-line-h-top-right {
  position: absolute;
  height: 1px;
  background-color: hsl(var(--border));
  top: calc(var(--cc-current-y) - var(--cc-current-size) / 2);
  left: calc(var(--cc-current-x) + var(--cc-current-size) / 2);
  width: calc(100vw - (var(--cc-current-x) + var(--cc-current-size) / 2));
}

.grid-line-h-bottom-left {
  position: absolute;
  height: 1px;
  background-color: hsl(var(--border));
  top: calc(var(--cc-current-y) + var(--cc-current-size) / 2);
  left: 0;
  width: calc(var(--cc-current-x) - var(--cc-current-size) / 2);
}

.grid-line-h-bottom-right {
  position: absolute;
  height: 1px;
  background-color: hsl(var(--border));
  top: calc(var(--cc-current-y) + var(--cc-current-size) / 2);
  left: calc(var(--cc-current-x) + var(--cc-current-size) / 2);
  width: calc(100vw - (var(--cc-current-x) + var(--cc-current-size) / 2));
}

.grid-line-v-left-top {
  position: absolute;
  width: 1px;
  background-color: hsl(var(--border));
  left: calc(var(--cc-current-x) - var(--cc-current-size) / 2);
  top: 0;
  height: calc(var(--cc-current-y) - var(--cc-current-size) / 2);
}

.grid-line-v-left-bottom {
  position: absolute;
  width: 1px;
  background-color: hsl(var(--border));
  left: calc(var(--cc-current-x) - var(--cc-current-size) / 2);
  top: calc(var(--cc-current-y) + var(--cc-current-size) / 2);
  height: calc(100vh - (var(--cc-current-y) + var(--cc-current-size) / 2));
}

.grid-line-v-right-top {
  position: absolute;
  width: 1px;
  background-color: hsl(var(--border));
  left: calc(var(--cc-current-x) + var(--cc-current-size) / 2);
  top: 0;
  height: calc(var(--cc-current-y) - var(--cc-current-size) / 2);
}

.grid-line-v-right-bottom {
  position: absolute;
  width: 1px;
  background-color: hsl(var(--border));
  left: calc(var(--cc-current-x) + var(--cc-current-size) / 2);
  top: calc(var(--cc-current-y) + var(--cc-current-size) / 2);
  height: calc(100vh - (var(--cc-current-y) + var(--cc-current-size) / 2));
}

/* Legacy grid lines (keeping for compatibility) */
.grid-lines-animated {
  opacity: var(--grid-lines-opacity);
}

/* PERFORMANCE OPTIMIZED: Integration categories with instant response */
.optimized-integration-container {
  position: absolute;
  left: var(--grid-offset-x);
  top: var(--grid-offset-y);
  width: var(--container-width);
  height: var(--container-height);
  opacity: var(--integration-container-opacity);
  transition: opacity 0.2s ease-out;
  will-change: opacity;
}

/* Optimized integration cards */
.optimized-integration-card {
  position: absolute;
  opacity: var(--integration-card-opacity);
  transform: scale(var(--integration-card-scale));
  transition:
    opacity 0.2s ease-out,
    transform 0.2s ease-out;
  will-change: opacity, transform;
}

/* Default grid positioning */
.integration-card-default {
  left: calc(var(--cell-width) * var(--grid-col-start));
  top: calc(var(--cell-height) * var(--grid-row-start));
  width: calc(var(--cell-width) * var(--grid-col-span));
  height: calc(var(--cell-height) * var(--grid-row-span));
}

/* Special positioning for cards that align with center card */
.integration-card-2d-graphics {
  --center-card-left-rel: calc(
    var(--cc-current-x) - var(--cc-current-size) / 2 - var(--grid-offset-x)
  );
  left: calc(var(--cell-width) * 2);
  top: calc(var(--cell-height) * var(--grid-row-start));
  width: calc(var(--center-card-left-rel) - var(--cell-width) * 2);
  height: calc(var(--cell-height) * var(--grid-row-span));
}

.integration-card-game-engines {
  --center-card-left-rel: calc(
    var(--cc-current-x) - var(--cc-current-size) / 2 - var(--grid-offset-x)
  );
  left: calc(var(--cell-width) * 2);
  top: calc(var(--cell-height) * var(--grid-row-start));
  width: calc(var(--center-card-left-rel) - var(--cell-width) * 2);
  height: calc(var(--cell-height) * var(--grid-row-span));
}

.integration-card-video-vfx {
  --center-card-right-rel: calc(
    var(--cc-current-x) + var(--cc-current-size) / 2 - var(--grid-offset-x)
  );
  left: var(--center-card-right-rel);
  top: calc(var(--cell-height) * var(--grid-row-start));
  width: calc(var(--cell-width) * 10 - var(--center-card-right-rel));
  height: calc(var(--cell-height) * var(--grid-row-span));
}

.integration-card-3d-texturing {
  --center-card-left-rel: calc(
    var(--cc-current-x) - var(--cc-current-size) / 2 - var(--grid-offset-x)
  );
  left: var(--center-card-left-rel);
  top: calc(var(--cell-height) * var(--grid-row-start));
  width: calc(var(--cell-width) * 10 - var(--center-card-left-rel));
  height: calc(var(--cell-height) * var(--grid-row-span));
}

/* PERFORMANCE OPTIMIZED: Page header with instant response */
.optimized-page-header {
  position: absolute;
  top: 64px;
  left: 0;
  right: 0;
  text-align: center;
  opacity: var(--category-phase);
  transition: opacity 0.2s ease-out;
  will-change: opacity;
}

/* Legacy styles (keeping for compatibility) */
.integration-categories-container-animated {
  opacity: var(--integration-container-opacity);
}

.integration-category-card-base {
  position: absolute;
  opacity: var(--integration-card-opacity);
  transform: scale(var(--integration-card-scale));
}

/* Modifier classes for cards aligning with CenterCard */
/* These assume that the CenterCard's CSS variables (--cc-current-left, --cc-current-width, etc.) */
/* are accessible/inherited or we set them on a common parent for IntegrationCategories as well. */
/* For simplicity, we'll assume they can be read. */

/* We need to know grid-offset-x to correctly align with centerCard using its absolute CSS vars */
/* This is a bit tricky because --cc-current-left is an absolute viewport position. */
/* The category cards are positioned relative to their grid container which has gridOffsetX. */
/* So, center_card_left_relative_to_grid = var(--cc-current-left) - var(--landing-grid-offset-x) */

.align-2d-graphics {
  --center-card-left-in-grid: calc(
    var(--global-cc-current-left) - var(--landing-grid-offset-x)
  );
  --center-card-width-val: var(--global-cc-current-width);
  --center-card-right-in-grid: calc(
    var(--center-card-left-in-grid) + var(--center-card-width-val)
  );
  left: calc(
    var(--landing-grid-cell-width) * 2
  ); /* colStart is 2 for 2D Graphics */
  width: calc(
    var(--center-card-right-in-grid) - (var(--landing-grid-cell-width) * 2)
  );
}

.align-game-engines {
  --center-card-left-in-grid: calc(
    var(--global-cc-current-left) - var(--landing-grid-offset-x)
  );
  left: calc(
    var(--landing-grid-cell-width) * 2
  ); /* colStart is 2 for Game Engines */
  width: calc(
    var(--center-card-left-in-grid) - (var(--landing-grid-cell-width) * 2)
  );
}

.align-video-vfx {
  --center-card-left-in-grid: calc(
    var(--global-cc-current-left) - var(--landing-grid-offset-x)
  );
  --center-card-width-val: var(--global-cc-current-width);
  --center-card-right-in-grid: calc(
    var(--center-card-left-in-grid) + var(--center-card-width-val)
  );
  left: var(--center-card-right-in-grid);
  width: calc(
    (var(--landing-grid-cell-width) * (7 + 3)) -
      var(--center-card-right-in-grid)
  );
}

.align-3d-texturing-cad {
  --center-card-left-in-grid: calc(
    var(--global-cc-current-left) - var(--landing-grid-offset-x)
  );
  left: var(--center-card-left-in-grid);
  width: calc(
    (var(--landing-grid-cell-width) * (5 + 5)) - var(--center-card-left-in-grid)
  );
}
